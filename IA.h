#ifndef IA_H
#define IA_H

#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<math.h>
#include <time.h>
#include <glib.h>

#include "chess.h"
#include "Zobrist.h"




#define BOARD_SIZE 8


extern GHashTable *transpositionTable;
extern GHashTable *gmTable;



typedef enum Value_t
{
    
    VALUE_WHITE_KING = 0,
    VALUE_WHITE_QUEEN = 1,
    VALUE_WHITE_BISHOP = 2,
    VALUE_WHITE_KNIGHT = 3,
    VALUE_WHITE_ROOK = 4,
    VALUE_WHITE_PAWN = 5,
    VALUE_BLACK_KING = 6,
    VALUE_BLACK_QUEEN = 7,
    VALUE_BLACK_BISHOP = 8,
    VALUE_BLACK_KNIGHT = 9,
    VALUE_BLACK_ROOK = 10,
    VALUE_BLACK_PAWN = 11,
    VALUE_EMPTY_CASE = 12,
    VALUE_COUNT = 13// Nombre total de valeurs
} Value;


static const double pieceValues[VALUE_COUNT] = {
    [VALUE_EMPTY_CASE] = 0.0,
    [VALUE_WHITE_KING] = 0.0,
    [VALUE_WHITE_QUEEN] = 9.0,
    [VALUE_WHITE_BISHOP] = 3.2,
    [VALUE_WHITE_KNIGHT] = 3.0,
    [VALUE_WHITE_ROOK] = 5.0,
    [VALUE_WHITE_PAWN] = 1.0,
    [VALUE_BLACK_KING] = 0.0,
    [VALUE_BLACK_QUEEN] = -9.0,
    [VALUE_BLACK_BISHOP] = -3.2,
    [VALUE_BLACK_KNIGHT] = -3.0,
    [VALUE_BLACK_ROOK] = -5.0,
    [VALUE_BLACK_PAWN] = -1.0
};





static const double WhitePawnStart[8][8] = {
    { 0,  0,  0,  0,  0,  0,  0,  0 },
    { 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5 },
    { 0.1, 0.1, 0.2, 0.3, 0.3, 0.2, 0.1, 0.1 },
    { 0.05, 0.05, 0.1, 0.25, 0.25, 0.1, 0.05, 0.05 },
    { 0, 0, 0, 0.2, 0.2, 0, 0, 0 },
    { 0.05, -0.05, -0.1, 0, 0, -0.1, -0.05, 0.05 },
    { 0.05, 0.1, 0.1, -0.2, -0.2, 0.1, 0.1, 0.05 },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};


static const double BlackPawnStart[8][8] = {
    {  0,    0,    0,    0,    0,    0,    0,    0   },
    { -0.05, -0.1, -0.1,  0.2,  0.2, -0.1, -0.1, -0.05 },
    { -0.05,  0.05,  0.1,  0,    0,   0.1,  0.05, -0.05 },
    {  0,    0,    0,   -0.2, -0.2,  0,    0,    0   },
    { -0.05, -0.05, -0.1, -0.25, -0.25, -0.1, -0.05, -0.05 },
    { -0.1,  -0.1,  -0.2, -0.3, -0.3, -0.2, -0.1,  -0.1  },
    { -0.5,  -0.5,  -0.5, -0.5, -0.5, -0.5, -0.5,  -0.5  },
    {  0,    0,    0,    0,    0,    0,    0,    0   }
};


static const double WhitePawnEnd[8][8] = {
    {0,   0,   0,   0,   0,   0,   0,   0},
    {0.8,  0.8,  0.8,  0.8,  0.8,  0.8,  0.8,  0.8},
    {0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5,  0.5},
    {0.3,  0.3,  0.3,  0.3,  0.3,  0.3,  0.3,  0.3},
    {0.2,  0.2,  0.2,  0.2,  0.2,  0.2,  0.2,  0.2},
    {0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1},
    {0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1,  0.1},
    {0,   0,   0,   0,   0,   0,   0,   0}

};

static const double BlackPawnEnd[8][8] = {
    {  0,   0,   0,   0,   0,   0,   0,   0  },
    {-0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1 },
    {-0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1 },
    {-0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2, -0.2 },
    {-0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3, -0.3 },
    {-0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5 },
    {-0.8, -0.8, -0.8, -0.8, -0.8, -0.8, -0.8, -0.8 },
    {  0,   0,   0,   0,   0,   0,   0,   0  }
};

static const double WhiteRook[8][8] = {
    {0,  0,  0,  0,  0,  0,  0,  0},
    {0.05, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,  0.05},
    {-0.05,  0,  0,  0,  0,  0,  0, -0.05},
    {-0.05,  0,  0,  0,  0,  0,  0, -0.05},
    {-0.05,  0,  0,  0,  0,  0,  0, -0.05},
    {-0.05,  0,  0,  0,  0,  0,  0, -0.05},
    {-0.05,  0,  0,  0,  0,  0,  0, -0.05},
    {0,  0,  0,  0.05,  0.05,  0,  0,  0}
};

static const double BlackRook[8][8] = {
    {  0,   0,   0,  -0.05, -0.05,   0,   0,   0  },
    { 0.05,  0,   0,   0,    0,    0,    0,  0.05 },
    { 0.05,  0,   0,   0,    0,    0,    0,  0.05 },
    { 0.05,  0,   0,   0,    0,    0,    0,  0.05 },
    { 0.05,  0,   0,   0,    0,    0,    0,  0.05 },
    { 0.05,  0,   0,   0,    0,    0,    0,  0.05 },
    {-0.05, -0.1, -0.1, -0.1, -0.1, -0.1, -0.1, -0.05 },
    {  0,   0,   0,   0,    0,    0,    0,   0   }
};


static const double WhiteKnights[8][8] = {
    {-0.50, -0.40, -0.30, -0.30, -0.30, -0.30, -0.40, -0.50},
    {-0.40, -0.20,  0.00,  0.00,  0.00,  0.00, -0.20, -0.40},
    {-0.30,  0.00,  0.10,  0.15,  0.15,  0.10,  0.00, -0.30},
    {-0.30,  0.05,  0.15,  0.20,  0.20,  0.15,  0.05, -0.30},
    {-0.30,  0.00,  0.15,  0.20,  0.20,  0.15,  0.00, -0.30},
    {-0.30,  0.05,  0.10,  0.15,  0.15,  0.10,  0.05, -0.30},
    {-0.40, -0.20,  0.00,  0.05,  0.05,  0.00, -0.20, -0.40},
    {-0.50, -0.40, -0.30, -0.30, -0.30, -0.30, -0.40, -0.50}
};

static const double BlackKnights[8][8] = {
    {0.50,  0.40,  0.30,  0.30,  0.30,  0.30,  0.40,  0.50},
    {0.40,  0.20, -0.00, -0.05, -0.05, -0.00,  0.20,  0.40},
    {0.30, -0.05, -0.10, -0.15, -0.15, -0.10, -0.05,  0.30},
    {0.30, -0.00, -0.15, -0.20, -0.20, -0.15, -0.00,  0.30},
    {0.30, -0.05, -0.15, -0.20, -0.20, -0.15, -0.05,  0.30},
    {0.30, -0.00, -0.10, -0.15, -0.15, -0.10, -0.00,  0.30},
    {0.40,  0.20, -0.00, -0.00, -0.00, -0.00,  0.20,  0.40},
    {0.50,  0.40,  0.30,  0.30,  0.30,  0.30,  0.40,  0.50}
};


static const double WhiteBishops[8][8] = {
    {-0.20, -0.10, -0.10, -0.10, -0.10, -0.10, -0.10, -0.20},
    {-0.10,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.10},
    {-0.10,  0.00,  0.05,  0.10,  0.10,  0.05,  0.00, -0.10},
    {-0.10,  0.05,  0.05,  0.10,  0.10,  0.05,  0.05, -0.10},
    {-0.10,  0.00,  0.10,  0.10,  0.10,  0.10,  0.00, -0.10},
    {-0.10,  0.10,  0.10,  0.10,  0.10,  0.10,  0.10, -0.10},
    {-0.10,  0.05,  0.00,  0.00,  0.00,  0.00,  0.05, -0.10},
    {-0.20, -0.10, -0.10, -0.10, -0.10, -0.10, -0.10, -0.20}
};

static const double BlackBishops[8][8] = 
{
    {   0.20,   0.10,   0.10,   0.10,   0.10,   0.10,   0.10,   0.20 },
    {   0.10,  -0.05,  -0.00,  -0.00,  -0.00,  -0.00,  -0.05,   0.10 },
    {   0.10,  -0.10,  -0.10,  -0.10,  -0.10,  -0.10,  -0.10,   0.10 },
    {   0.10,  -0.00,  -0.10,  -0.10,  -0.10,  -0.10,  -0.00,   0.10 },
    {   0.10,  -0.05,  -0.05,  -0.10,  -0.10,  -0.05,  -0.05,   0.10 },
    {   0.10,  -0.00,  -0.05,  -0.10,  -0.10,  -0.05,  -0.00,   0.10 },
    {   0.10,  -0.00,  -0.00,  -0.00,  -0.00,  -0.00,  -0.00,   0.10 },
    {   0.20,   0.10,   0.10,   0.10,   0.10,   0.10,   0.10,   0.20 },
};

static const double WhiteQueens[8][8] = {
    {-0.20, -0.10, -0.10, -0.05, -0.05, -0.10, -0.10, -0.20},
    {-0.10,  0.00,  0.00,  0.00,  0.00,  0.00,  0.00, -0.10},
    {-0.10,  0.00,  0.05,  0.05,  0.05,  0.05,  0.00, -0.10},
    {-0.05,  0.00,  0.05,  0.05,  0.05,  0.05,  0.00, -0.05},
    { 0.00,  0.00,  0.05,  0.05,  0.05,  0.05,  0.00, -0.05},
    {-0.10,  0.05,  0.05,  0.05,  0.05,  0.05,  0.00, -0.10},
    {-0.10,  0.00,  0.05,  0.00,  0.00,  0.00,  0.00, -0.10},
    {-0.20, -0.10, -0.10, -0.05, -0.05, -0.10, -0.10, -0.20}
};

static const double BlackQueens[8][8] = 
{
    {   0.20,   0.10,   0.10,   0.05,   0.05,   0.10,   0.10,   0.20 },
    {   0.10,  -0.00,  -0.00,  -0.00,  -0.00,  -0.05,  -0.00,   0.10 },
    {   0.10,  -0.00,  -0.05,  -0.05,  -0.05,  -0.05,  -0.05,   0.10 },
    {   0.05,  -0.00,  -0.05,  -0.05,  -0.05,  -0.05,  -0.00,  -0.00 },
    {   0.05,  -0.00,  -0.05,  -0.05,  -0.05,  -0.05,  -0.00,   0.05 },
    {   0.10,  -0.00,  -0.05,  -0.05,  -0.05,  -0.05,  -0.00,   0.10 },
    {   0.10,  -0.00,  -0.00,  -0.00,  -0.00,  -0.00,  -0.00,   0.10 },
    {   0.20,   0.10,   0.10,   0.05,   0.05,   0.10,   0.10,   0.20 },
};

static const double WhiteKingStart[8][8] = {
    {-0.80, -0.70, -0.70, -0.70, -0.70, -0.70, -0.70, -0.80},
    {-0.60, -0.60, -0.60, -0.60, -0.60, -0.60, -0.60, -0.60},
    {-0.40, -0.50, -0.50, -0.60, -0.60, -0.50, -0.50, -0.40},
    {-0.30, -0.40, -0.40, -0.50, -0.50, -0.40, -0.40, -0.30},
    {-0.20, -0.30, -0.30, -0.40, -0.40, -0.30, -0.30, -0.20},
    {-0.10, -0.20, -0.20, -0.20, -0.20, -0.20, -0.20, -0.10},
    { 0.20,  0.20, -0.05, -0.05, -0.05, -0.05,  0.20,  0.20},
    { 0.20,  0.30,  0.10,  0.00,  0.00,  0.10,  0.30,  0.20}
};

static const double BlackKingStart[8][8] = 
{
    {  -0.20,  -0.30,  -0.10,  -0.00,  -0.00,  -0.10,  -0.30,  -0.20 },
    {  -0.20,  -0.20,   0.05,   0.05,   0.05,   0.05,  -0.20,  -0.20 },
    {   0.10,   0.20,   0.20,   0.20,   0.20,   0.20,   0.20,   0.10 },
    {   0.20,   0.30,   0.30,   0.40,   0.40,   0.30,   0.30,   0.20 },
    {   0.30,   0.40,   0.40,   0.50,   0.50,   0.40,   0.40,   0.30 },
    {   0.40,   0.50,   0.50,   0.60,   0.60,   0.50,   0.50,   0.40 },
    {   0.60,   0.60,   0.60,   0.60,   0.60,   0.60,   0.60,   0.60 },
    {   0.80,   0.70,   0.70,   0.70,   0.70,   0.70,   0.70,   0.80 },
};

static const double WhiteKingEnd[8][8] = {
    {-0.20, -0.10, -0.10, -0.10, -0.10, -0.10, -0.10, -0.20},
    {-0.05,  0.00,  0.05,  0.05,  0.05,  0.05,  0.00, -0.05},
    {-0.10, -0.05,  0.20,  0.30,  0.30,  0.20, -0.05, -0.10},
    {-0.15, -0.10,  0.35,  0.45,  0.45,  0.35, -0.10, -0.15},
    {-0.20, -0.15,  0.30,  0.40,  0.40,  0.30, -0.15, -0.20},
    {-0.25, -0.20,  0.20,  0.25,  0.25,  0.20, -0.20, -0.25},
    {-0.30, -0.25,  0.00,  0.00,  0.00,  0.00, -0.25, -0.30},
    {-0.50, -0.30, -0.30, -0.30, -0.30, -0.30, -0.30, -0.50}
};

static const double BlackKingEnd[8][8] =
{
    {   0.50,   0.30,   0.30,   0.30,   0.30,   0.30,   0.30,   0.50 },
    {   0.30,   0.25,  -0.00,  -0.00,  -0.00,  -0.00,   0.25,   0.30 },
    {   0.25,   0.20,  -0.20,  -0.25,  -0.25,  -0.20,   0.20,   0.25 },
    {   0.20,   0.15,  -0.30,  -0.40,  -0.40,  -0.30,   0.15,   0.20 },
    {   0.15,   0.10,  -0.35,  -0.45,  -0.45,  -0.35,   0.10,   0.15 },
    {   0.10,   0.05,  -0.20,  -0.30,  -0.30,  -0.20,   0.05,   0.10 },
    {   0.05,  -0.00,  -0.05,  -0.05,  -0.05,  -0.05,  -0.00,   0.05 },
    {   0.20,   0.10,   0.10,   0.10,   0.10,   0.10,   0.10,   0.20 },
};


Value pieceToValue(Piece piece);
double getEval(ChessGame *game);
Move *IAGetMove(ChessGame *game);
Move *IAGetMoveRec(ChessGame *game, int depth, bool maximizingPlayer, double alpha, double beta);

int countPosition(ChessGame *game, int depth);
double evaluateCaptures(ChessGame *game, int quiescentDepth, bool maximizingPlayer, double alpha, double beta);
int getNegDepthFromQuiescentDepth(int quiescentDepth);
double forceKingToTheEdge(ChessGame *game, Player winingPlayer);

#endif